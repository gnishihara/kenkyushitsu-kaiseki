---
title: "地図の作り方（有川湾の例）"
format: 
  html:
    html-math-method: katex
    code-fold: true
    df-print: paged
reference-location: margin
citation-location: margin
bibliography: references.bib
---

# 必要なパッケージ

パッケージはここで読み込む。

```{r}
library(tidyverse)

# 作図用補助パッケージ
library(ggpubr)
library(ggrepel)
library(ggsflabel)
library(patchwork)

# ggplot フォントの設定ようパッケージ
library(showtext)
library(magick)

# 地図データ用パッケージ
library(sf)
library(ggspatial)
```

# 図の初期設定

図とフォントの設定をする。
`base_size` はフォントサイズです。
`base_family` はフォントの種類です。
`showtext_auto()` はフォントを自動的に設定する関数です。

```{r}
# 日本語の曜日を英語にするための関数ですが、
# 研究室のサーバを使っているのであれば、不要です。
Sys.setlocale("LC_TIME", "en_US.UTF-8") 

# フォントの設定
font_add_google("Noto Sans JP", "notosans")

theme_pubclean(base_size = 30, base_family = "notosans") |> 
  theme_set()
showtext_auto()
```

# 全国地図データ

地図データは、国土地理院のデータをもとに準備しました。
地図データは研究室のサーバーに保存しているので、
`sf` パッケージで読み込めます。

```{r}
folderpath = "~/Lab_Data/Japan_map_data/Japan/"
filename = "todofuken.rds"

japan = 
  str_c(folderpath, filename) |> 
  read_rds(filename)
```

CRS (Coordinate Reference System) とは、座標参照系のことです。
`japan` の CRS を確認しましょう。

```{r}
st_crs(japan)
```

`japan` のCRSは **JGD2011** ですね。
CRS以外に、EPSG (European Petroleum Survey Group) の表記もあります。
EPSGコードは、座標系を一意に識別するための番号です。
`japan` のEPSGコードは **6668** でした。

座標参照系には、地理座標系と投影座標系の2種類があります。

* 地理座標系: 緯度経度のような球面座標系（単位は度）
* 投影座標系: 平面座標系（単位はメートル）

* EPSG Code: 4326 CRS: WGS84（度）
* EPSG Code: 6668 CRS: JGD2011（度）
* EPSG Code: 6669 CRS: JGD2011 (メートル)

**重要!** 

研究室のガーミンのGPSの EPSGコードは 4326 ですが、
グーグルマップの EPSGコードは 3857 です。
EPSGコード（座標参照系）を統一してから、
地図データを結合する必要があります。

ではここで長崎の情報を `japan` から抽出します。

```{r}
nagasaki = japan |> 
  filter(str_detect(N03_001, "長崎"))
```

```{r}
SEACOLOR = "#006fc5"
LANDCOLOR = "gray80"
NAGASAKICOLOR = "#C4B700"

pout =
  ggplot() +
  geom_sf(data = japan,
          color = NA,
          fill = LANDCOLOR) +
  geom_sf(data = nagasaki, 
          color = NA,
          fill = NAGASAKICOLOR) +
  coord_sf(datum = NA)+ 
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = SEACOLOR, color = NA),
    plot.background = element_rect(fill = SEACOLOR, color = NA)
  )

fname = "./Images/nagasaki-map.png"
ggsave(fname, pout, width = 10, height = 10)
```

::: {#fig-nagasaki-map-simple}
![長崎県の地図](./Images/nagasaki-map.png)
:::


沿岸線だけのデータ.

```{r}
#| eval: false
fname = "~/Lab_Data/Japan_map_data/GSI/coastl_jpn.shp"
coastline = st_read(fname) 
coastline = coastline |>
  st_transform(6669) |> summarise()

```


次のデータは陸域を色塗できるが、北方領土は含まれていない.

```{r}
#| eval: false
fname = "~/Lab_Data/Japan_map_data/gadm36_JPN_2_sf.rds"
coastline = 
  read_rds(fname) |>
  st_transform(6669) |> summarise()
```

有川湾の位置情報を準備する。
tibble には google map の位置情報（GPS)をいれました。
Google map の位置情報は EPSG 4326 ですので、後での 2450 に変換する必要があります。

```{r}
jpn4326 = tibble(long = c(134.50064258737686),
                 lat = c(35.55559885171853)) |>
  st_as_sf(coords = c("long", "lat"),
           crs = 4326,
           agr = "constant")
jpn6669 = 
  jpn4326 |> 
  st_transform(crs = 6669)
```

ここでは地図を表示する範囲を決定する。

```{r}
jpn6669centroid = jpn6669 |> st_buffer(dist = 1000000)
jpn6669box = jpn6669centroid |> st_bbox()
```

次は有川湾のデータを準備する。



元になるデータはここから。

```{r}
fname = "~/Lab_Data/tanimaes/share_files/kamigoto_report_2022/"
dset_nnm = dir(fname, full = T, pattern = "dset_50.+.rds")
```

横浦の定点はここで設定する。

```{r}
ari4326 = tibble(
  station = str_c("St.", 1:7),
  long = c(
    129.11801934274172,
    129.1184700774443,
    129.11904476419005,
    129.1184954312713,
    129.11888982413603,
    129.1190982889792,
    129.12016878394536
  ),
  lat = c(
    32.98801913636207,
    32.98802149929502,
    32.987945885409275,
    32.988449189116935,
    32.9885744238659,
    32.98911553046403,
    32.98760798505502
  )
) |>
  st_as_sf(coords = c("long", "lat"),
           crs = 4326,
           agr = "constant")
```


```{r}
st_info = read_rds(dset_nnm[3]) |>
  add_row(
    location = "naname",
    station = as_factor(6),
    long = 129.0886920203674,
    lat = 32.983698798553874,
    label = "St.6"
  ) |>
  add_row(
    location = "naname",
    station = as_factor(4),
    long = 129.08872763540384,
    lat = 32.98377724863941,
    label = "St.4"
  ) |>
  mutate(station = as.double(station))

st_info = st_info |> filter(!(str_detect(location, "nana") &
                                station == 4)) |> distinct()

st_info = st_info |>
  st_as_sf(coords = c("long", "lat"),
           crs = 4326,
           agr = "constant")
```


マップを作図するとき、面積や距離を調べるときなどは、 CRS を 2450 に変える.

```{r}
ari6669 = ari4326 |> st_transform(crs = 6669)
naname6669 = st_info |> filter(str_detect(location, "nana")) |> st_transform(crs = 6669)
yokoura6669 = st_info |> filter(!str_detect(location, "nana")) |> st_transform(crs = 6669)
```


```{r}
# 地図の範囲を決定. ------------------------------------------------------------

# 調査地点の位置情報を１つのポリゴンにまとめ、そのポリゴンの重心を求める.
ari6669centroid = ari6669 |> st_union() |> st_centroid()

# 調査地点の重心にバッファーをもたせる.
ari6669centroid1 = ari6669centroid |> st_buffer(dist = 20000)
ari6669centroid2 = ari6669centroid |> st_buffer(dist = 150)

naname6669centroid = naname6669 |> st_buffer(dist = 50)
yokoura6669centroid = yokoura6669 |> st_buffer(dist = 50)

# バッファーの領域から、図の幅をもとめる.
ari6669box1 = ari6669centroid1 |> st_bbox()
ari6669box2 = ari6669centroid2 |> st_bbox()

naname6669box = naname6669centroid |> st_bbox()
yokoura6669box = yokoura6669centroid |> st_bbox()
```


```{r}
sitedata = tibble(
  location = c("yokoura", "naname"),
  label = c("横浦", "七目"),
  lat = c(32.98823666829777, 32.98379888412241),
  long = c(129.11806840839094, 129.0887698387881)
) |> 
  st_as_sf(coords = c("long", "lat"),
         crs = 4326,
         agr = "constant")


oceandata = tibble(
  location = c("arikawabay", "eastchinasea", "gotonada"),
  label = c("有川湾", "東シナ海", "五島灘"),
  lat = c(33.05, 33.05, 32.85),
  long =c(129.15, 128.95, 129.15)
) |> 
  st_as_sf(coords = c("long", "lat"),
           crs = 4326,
           agr = "constant")

sitedata6669 = sitedata |> st_transform(crs = 6669)
oceandata6669 = oceandata |> st_transform(crs = 6669)

```


## 全国

色は次のサイトを参考にした (https://ironodata.info).

```{r}
SEACOLOR = "#006fc5"
LANDCOLOR = "gray80"
BOXCOLOR = "#C4000D"
STCOLOR = "#C4B700"

jpmap = 
  coastline |> 
  ggplot() + 
  geom_sf(fill = LANDCOLOR, color = "transparent") +
  geom_sf(
    data = ari6669centroid,
    color = BOXCOLOR,
    fill = "transparent",
    shape = 21,
    stroke = 1,
    size = 10
  ) +
  coord_sf(
    xlim = c(jpn6669box[1], jpn6669box[3]),
    ylim = c(jpn6669box[2], jpn6669box[4])
  ) +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = SEACOLOR),
    panel.border = element_rect(color = SEACOLOR, fill = "transparent"),
    # panel.grid = element_line(color = SEACOLOR),
    axis.text = element_text(color = "black", face = "bold"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )
```

```{r}
jpmap
```

## 調査地点の図



```{r}
boxdata = 
  bind_rows(naname = c(naname6669box), 
          yokoura = c(yokoura6669box), .id = "location") |> 
  mutate(text = c("七目", "横浦"))

bdata  = boxdata |> 
reframe(across(c(xmin, ymin, xmax, ymax), 
\(x) sign(x) * abs(max(x))))



gotomap = japan |>
  ggplot() + geom_sf(fill = LANDCOLOR, color = "transparent") +
  geom_sf_text(
    aes(label = label),
    data = oceandata,
    family = "notosans",
    fontface = "bold",
    color = LANDCOLOR,
    size = 3,
    vjust =0.5, 
    hjust = 0.5) +
  geom_sf_label_repel(
    aes(label = label),
    data = sitedata6669,
    min.segment.length = 0,
    point.padding = unit(2.5, "mm"),
    segment.color = BOXCOLOR,
    fill = STCOLOR,
    color = "black",
    family = "notosans",
    fontface = "bold",
    size = 5,
    box.padding = 1,
    seed = 2024
  ) +
  geom_sf(
    data = sitedata6669,
    color = BOXCOLOR,
    fill = STCOLOR,
    shape = 1,
    size = 4
  ) +
  coord_sf(
    xlim = c(bdata[1], bdata[3]),
    ylim = c(bdata[2], bdata[4])
  ) +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = SEACOLOR),
    panel.border = element_rect(color = SEACOLOR, fill = "transparent"),
    # panel.grid = element_line(color = STCOLOR),
    axis.text = element_text(color = "black", face = "bold"),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )
gotomap
```


```{r}
yokouramap = japan |>
  st_transform(crs = 6669) |>
  ggplot() + geom_sf(fill = LANDCOLOR, color = "transparent") +
  geom_sf_label_repel(
    aes(label = station),
    data = yokoura6669,
    min.segment.length = 0,
    fill = STCOLOR,
    color = "black",
    family = "notosans",
    fontface = "bold",
    size = 5,
    box.padding = 1,
    seed = 2024
  ) +
  geom_sf(
    data = yokoura6669,
    color = "black",
    fill = STCOLOR,
    shape = 21,
    size = 4
  ) +
  coord_sf(
    xlim = c(yokoura6669box[1], yokoura6669box[3]),
    ylim = c(yokoura6669box[2], yokoura6669box[4])
  ) +
  geom_text(aes(x = xmax, 
                y = ymax, 
                label = text),
            data = boxdata |> filter(str_detect(location, "yoko")),
            family = "notosans",
            fontface = "bold",
            color = LANDCOLOR,
            size = 9,
            vjust = 1, 
            hjust = 1) +
  annotation_scale(pad_x = unit(0.01, "npc"),
                   pad_y = unit(0.01, "npc"),
                   height = unit(1, "char"),
                   bar_cols = c(STCOLOR, SEACOLOR),
                   line_width = 1,
                   text_cex = 1,
                   text_pad = unit(0.5, "char"),
                   text_family = "notosans",
                   text_face = "bold") +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = SEACOLOR),
    panel.border = element_rect(color = SEACOLOR, fill = "transparent"),
    panel.grid = element_line(color = SEACOLOR),
    # axis.text = element_text(face = "bold"),
    axis.text = element_blank(),
    axis.title = element_blank()
  )
```


```{r}
nanamemap = 
  japan |>
  st_transform(crs = 6669) |>
  ggplot() + geom_sf(fill = LANDCOLOR, color = "transparent") +
  geom_sf_label_repel(
    aes(label = station),
    data = naname6669,
    min.segment.length = 0,
    fill = STCOLOR,
    color = "black",
    family = "notosans",
    fontface = "bold",
    size = 5,
    box.padding = 2
  ) +
  geom_sf(
    data = naname6669,
    color = "black",
    fill = STCOLOR,
    shape = 21,
    size = 4
  ) +
  coord_sf(
    xlim = c(naname6669box[1], naname6669box[3]),
    ylim = c(naname6669box[2], naname6669box[4])
  ) +
  geom_text(aes(x = xmax, 
                y = ymax, 
                label = text),
            data = boxdata |> filter(str_detect(location, "nana")),
            family = "notosans",
            fontface = "bold",
            color = LANDCOLOR,
            size = 9,
            vjust = 1, 
            hjust = 1) +
  annotation_scale(pad_x = unit(0.01, "npc"),
                   pad_y = unit(0.01, "npc"),
                   height = unit(1, "char"),
                   bar_cols = c(STCOLOR, SEACOLOR),
                   line_width = 1,
                   text_cex = 1,
                   text_pad = unit(0.5, "char"),
                   text_family = "notosans",
                   text_face = "bold") +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = SEACOLOR),
    panel.border = element_rect(color = SEACOLOR, fill = "transparent"),
    panel.grid = element_line(color = SEACOLOR),
    # axis.text = element_text(face = "bold"),
    axis.text = element_blank(),
    axis.title = element_blank()
  )
```


```{r}
figuremap = jpmap + gotomap + yokouramap + nanamemap + plot_layout(ncol = 4)

wh = gnnlab::aseries(3)
gnnlab::save_plot(
  "./Images/study-map.pdf",
  plot = figuremap,
  width = wh[2],
  height = wh[1],
  density = 300
)
```


```{r}
pdfname =   "Images/study-map.pdf"
pngname = str_replace(pdfname, "pdf", "png")

image_read_pdf(pdfname, density = 600) |> 
  image_trim() |> 
  image_border(color = "white", geometry = "50x50") |> 
  image_write(pngname, format = "png")
```

